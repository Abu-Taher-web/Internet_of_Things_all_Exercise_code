[
    {
        "id": "fa3cdcfc3d5788c9",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d20ef0ffc58d7038",
        "type": "mqtt in",
        "z": "fa3cdcfc3d5788c9",
        "name": "Subscribe to HiveMQ",
        "topic": "tumi_picow/temp",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "0b786c6856acfe30",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 120,
        "wires": [
            [
                "83293d7147d36e2c"
            ]
        ]
    },
    {
        "id": "83293d7147d36e2c",
        "type": "function",
        "z": "fa3cdcfc3d5788c9",
        "name": "function 1",
        "func": "let newMsg = {};\n\n// Process incoming payload (you may already have this step in your function)\nif (typeof msg.payload === 'string') {\n    newMsg.payload = parseFloat(msg.payload.slice(0, 5));  // Process the string and convert to float\n} else if (typeof msg.payload === 'object') {\n    newMsg.payload = parseFloat(JSON.stringify(msg.payload).slice(0, 5));  // Handle object payload\n} else {\n    newMsg.payload = parseFloat(msg.payload.toString().slice(0, 5));  // Handle other types\n}\n\n// Prepare data for InfluxDB\nnewMsg.topic = \"temperature_readings\";  // Replace with your measurement name\nnewMsg.payload = {\n    field_name: newMsg.payload,  // Replace with your field name\n};\n\n// Return the message to be sent to InfluxDB\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 200,
        "wires": [
            [
                "712af50c0e52963e",
                "52d52bda68ae2332"
            ]
        ]
    },
    {
        "id": "712af50c0e52963e",
        "type": "debug",
        "z": "fa3cdcfc3d5788c9",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 200,
        "wires": []
    },
    {
        "id": "52d52bda68ae2332",
        "type": "influxdb out",
        "z": "fa3cdcfc3d5788c9",
        "influxdb": "b5523e73cc6bc94c",
        "name": "My InfluxDB Local",
        "measurement": "temperature_readings",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "s",
        "retentionPolicyV18Flux": "",
        "org": "University of Oulu",
        "bucket": "Bucket1",
        "x": 530,
        "y": 280,
        "wires": []
    },
    {
        "id": "0b786c6856acfe30",
        "type": "mqtt-broker",
        "name": "HiveMQ cloud",
        "broker": "cd6cdc287a1e4a5eb09c6350c2489f9c.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "b5523e73cc6bc94c",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "Local InfluxDB",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://127.0.0.1:8086/",
        "timeout": "10",
        "rejectUnauthorized": true
    }
]